{"version":3,"sources":["./src/app/guard/card-items.guard.ts","./src/app/services/auth/order/order.service.ts","./src/app/services/guest/user/user.service.ts"],"names":[],"mappings":"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","file":"common.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport {CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router} from '@angular/router';\nimport { Observable } from 'rxjs';\nimport {AuthService} from \"../services/auth/auth.service\";\nimport {CheckoutService} from '../services/guest/checkout/checkout.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CardItemsGuard implements CanActivate {\n\n    constructor(private checkoutService: CheckoutService, private router: Router) {}\n\n    canActivate(\n        route: ActivatedRouteSnapshot,\n        state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n        if (this.checkoutService.products.length) {\n            return true;\n        }\n        this.router.navigate(['/', 'checkout', 'no-items']);\n        return false;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport {HttpClient, HttpParams} from '@angular/common/http';\nimport {Observable} from \"rxjs\";\nimport {environment} from \"../../../../environments/environment\";\nimport {IOrder, IPaymentStatus} from '../../../interfaces/IOrder';\nimport {IResponse, IResponseData} from '../../../interfaces/IResponse';\nimport {IProduct} from '../../../interfaces/IProduct';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrderService {\n    constructor(private httpClient: HttpClient) { }\n\n    public getAll(page?: number): Observable<IResponseData<IProduct>> {\n        let httpParams = new HttpParams();\n        if (page) {\n            httpParams = httpParams.append('page', page.toString());\n        }\n        return this.httpClient.get<IResponseData<IProduct>>(environment.baseAuthUrl + '/orders/get-all', {\n            params: httpParams\n        });\n    }\n\n    public show(id: number): Observable<IOrder> {\n        let params = new HttpParams();\n        params = params.append('id', id.toString());\n        return this.httpClient.get<IOrder>(environment.baseSiteUrl + '/orders/show/', {\n            params\n        });\n    }\n\n    public delete(id: number): Observable<IResponse<IProduct>> {\n        return this.httpClient.delete<IResponse<IProduct>>(environment.baseAuthUrl + '/orders/delete/' + id, {});\n    }\n\n\tpublic dataprovider() {\n        return this.httpClient.get<IDataprovider>(environment.baseAuthUrl + '/orders/dataprovider');\n\t}\n\n    public changeStatus(id, status: string, trackingCode?: string) {\n        return this.httpClient.put<IResponse<IProduct>>(environment.baseAuthUrl + '/orders/status/', {\n            id,\n            status,\n            tracking_code: trackingCode\n        });\n    }\n}\n\ninterface IDataprovider {\n    payment_statuses: Array<IPaymentStatus>\n}\n\n","import { Injectable } from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from \"rxjs\";\nimport {IUser} from \"../../../interfaces/IUser\";\nimport {environment} from \"../../../../environments/environment\";\nimport {IAddress} from '../../../interfaces/IAddress';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n    constructor(private httpClient: HttpClient) { }\n\n    public login(email: string, password: string): Observable<ILoginResponse> {\n        return this.httpClient.post<ILoginResponse>(environment.baseAuthUrl + '/login', {\n            email: email,\n            password: password\n        });\n    }\n\n    public me(): Observable<any> {\n        return this.httpClient.get<any>(environment.baseSiteUrl + '/auth/me');\n    }\n\n\tpublic forgot(email: string) {\n        return this.httpClient.post<ILoginResponse>(environment.baseSiteUrl + '/forgot', {\n            email: email,\n        });\n\t}\n\n    public create(user: IUser): Observable<any> {\n        return this.httpClient.post<any>(environment.baseSiteUrl + '/users/create', user);\n    }\n\n    public address(address: IAddress): Observable<any> {\n        return this.httpClient.post<any>(environment.baseSiteUrl + '/users/address', address);\n    }\n\n    public rememberToken(code: string): Observable<any> {\n        return this.httpClient.post<any>(environment.baseSiteUrl + '/remember_token', {\n            code,\n        });\n    }\n\n    public password(data: IPassword): Observable<any> {\n        return this.httpClient.post<any>(environment.baseSiteUrl + '/password', data);\n    }\n\n    public set email(email: string) {\n        sessionStorage.setItem('email', email);\n    }\n\n    public get email() {\n        return sessionStorage.getItem('email');\n    }\n}\ninterface IPassword {\n    code: string;\n    password: string;\n    password_confirm: string;\n}\n\ninterface ILoginResponse {\n  user?: IUser;\n  token?: string;\n}\n"],"sourceRoot":"webpack:///"}