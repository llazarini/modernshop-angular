{"version":3,"sources":["./src/app/pages/auth/orders/orders-routing.module.ts","./src/app/pages/auth/orders/orders.component.ts","./src/app/pages/auth/orders/orders.component.html","./src/app/pages/auth/orders/orders.module.ts","./src/app/pages/auth/orders/status-update/status-update.component.ts","./src/app/pages/auth/orders/status-update/status-update.component.html","./src/app/services/auth/order/order.service.ts"],"names":[],"mappings":"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","file":"994.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport {OrdersComponent} from \"./orders.component\";\n\nconst routes: Routes = [\n\t{\n\t\tpath: '',\n\t\tcomponent: OrdersComponent,\n\t},\n];\n\n@NgModule({\n\timports: [RouterModule.forChild(routes)],\n\texports: [RouterModule],\n})\nexport class OrdersRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport {AlertService} from '../../../services/alert/alert.service';\nimport {ICategory} from '../../../interfaces/ICategory';\nimport {OrderService} from '../../../services/auth/order/order.service';\nimport {IPaymentStatus} from '../../../interfaces/IOrder';\nimport {ConfirmComponent} from '../share/alert/confirm.component';\nimport {StatusUpdateComponent} from './status-update/status-update.component';\nimport {MatDialog} from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-orders',\n  templateUrl: './orders.component.html',\n  styleUrls: ['./orders.component.scss']\n})\nexport class OrdersComponent implements OnInit {\n    public displayedColumns: Array<string> = ['id', 'payment_type', 'shipment', 'details', 'amount', 'payment_type', 'payment_status', 'actions'];\n    public loading: number = 0;\n    public dataSource: Array<ICategory>;\n    public page: number = 0;\n    public total: number;\n\tpublic status: string;\n    public paymentStatuses: Array<IPaymentStatus>;\n\n    constructor(\n        private orderService: OrderService,\n        private alertService: AlertService,\n        private matDialog: MatDialog,\n    ) { }\n\n    ngOnInit(): void {\n        this.getAll();\n        this.dataprovider();\n    }\n\n    public getAll(reset?: boolean) {\n        if (reset) {\n            this.dataSource = [];\n        }\n        this.loading += 1;\n        this.orderService\n            .getAll(this.page+1)\n            .subscribe((response) => {\n                this.dataSource = response.data;\n                this.total = response.total;\n            })\n            .add(() => this.loading -= 1);\n    }\n\n    public dataprovider() {\n        this.loading += 1;\n        this.orderService\n            .dataprovider()\n            .subscribe((response) => {\n                this.paymentStatuses = response.payment_statuses;\n                console.log(response);\n            })\n            .add(() => this.loading -= 1);\n    }\n\n    public pageChange(event: any) {\n        this.page = event.pageIndex;\n        this.getAll();\n    }\n\n    public updateStatus(row, status: string) {\n        const dialog = this.matDialog.open(StatusUpdateComponent, {\n            minWidth: '300px',\n            maxWidth: '700px',\n            data: { status },\n        });\n        return dialog\n            .afterClosed()\n            .subscribe(response => {\n                if(!response || !response.update) {\n                    return;\n                }\n                this.changeStatus(row, status, response.trackingCode)\n            });\n    }\n\n    private changeStatus(row, status: string, trackingCode?: string) {\n        this.loading += 1;\n        this.orderService\n            .changeStatus(row.id, status, trackingCode)\n            .subscribe((response) => {\n                this.getAll(true);\n                this.alertService.toast(response.message);\n            })\n            .add(() => this.loading -= 1);\n    }\n\n    public haveSomeStatus(slug: string) {\n        return slug === 'waiting_payment' || slug === 'paid';\n    }\n}\n","<mat-progress-bar class=\"progress\" *ngIf=\"loading > 0\" mode=\"indeterminate\"></mat-progress-bar>\n\n<div fxLayout=\"column\">\n    <div fxLayoutAlign=\"space-between center\">\n        <h1 class=\"margin-right\">Pedidos</h1>\n    </div>\n    <table fxFlex mat-table [dataSource]=\"dataSource\"\n           matSort matSortActive=\"id\" matSortDisableClear matSortDirection=\"desc\">\n        <ng-container matColumnDef=\"id\">\n            <th mat-header-cell *matHeaderCellDef width=\"50px\">#</th>\n            <td mat-cell *matCellDef=\"let row\">{{row.id}}</td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"shipment\">\n            <th mat-header-cell *matHeaderCellDef>Frete</th>\n            <td mat-cell *matCellDef=\"let row\">{{ row.shipment_option}} {{ row.shipment | price }}</td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"details\">\n            <th mat-header-cell *matHeaderCellDef>Detalhes</th>\n            <td mat-cell *matCellDef=\"let row\">\n                <div fxLayout=\"column\" *ngFor=\"let orderProduct of row.order_products; let i = index\">\n                    <div>{{ orderProduct.product?.name }}</div>\n                    <small *ngFor=\"let orderOption of orderProduct?.order_product_options\" class=\"muted\">{{ orderOption?.option?.name }}</small>\n                    <small fxLayout=\"row\">\n                        <div>{{ orderProduct.price | price }}</div>\n                        <div class=\"margin-left\">{{ orderProduct.quantity}} x itens</div>\n                    </small>\n                </div>\n            </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"payment_type\">\n            <th mat-header-cell *matHeaderCellDef>Tipo de Pagamento</th>\n            <td mat-cell *matCellDef=\"let row\">{{ row.payment_type?.name }}</td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"payment_status\">\n            <th mat-header-cell *matHeaderCellDef>Status de pagamento</th>\n            <td mat-cell *matCellDef=\"let row\">{{ row.payment_status?.name }}</td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"amount\">\n            <th mat-header-cell *matHeaderCellDef>Total</th>\n            <td mat-cell *matCellDef=\"let row\">{{ row.amount | price }}</td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"actions\" stickyEnd>\n            <th mat-header-cell *matHeaderCellDef class=\"actions\">Ações</th>\n            <td mat-cell *matCellDef=\"let row\">\n                <ng-container *ngIf=\"haveSomeStatus(row.payment_status?.slug)\">\n                    <button mat-stroked-button color=\"primary\" [matMenuTriggerFor]=\"menu\">\n                        <i class=\"mdi mdi-arrow-split-vertical\"></i>\n                        Atualizar Status\n                    </button>\n                    <mat-menu #menu=\"matMenu\">\n                        <button mat-menu-item *ngIf=\"row.payment_status?.slug === 'waiting_payment'\" (click)=\"updateStatus(row, 'paid')\">\n                            <i class=\"mdi mdi-check\"></i>\n                            Informar Pagamento\n                        </button>\n                        <button mat-menu-item *ngIf=\"row.payment_status?.slug === 'waiting_payment'\" (click)=\"updateStatus(row, 'cancel')\">\n                            <i class=\"mdi mdi-close\"></i>\n                            Cancelar Pedido\n                        </button>\n                        <button mat-menu-item *ngIf=\"row.payment_status?.slug === 'paid'\" (click)=\"updateStatus(row, 'refunded')\">\n                            <i class=\"mdi mdi-arrow-left\"></i>\n                            Estornar\n                        </button>\n                        <button mat-menu-item  *ngIf=\"row.payment_status?.slug === 'paid'\" (click)=\"updateStatus(row, 'sent')\">\n                            <i class=\"mdi mdi-truck\"></i>\n                            Informar envio\n                        </button>\n                    </mat-menu>\n                </ng-container>\n            </td>\n        </ng-container>\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n    </table>\n\n    <mat-paginator pageSize=\"10\"\n                   [pageIndex]=\"page\"\n                   [length]=\"total\"\n                   (page)=\"pageChange($event)\"></mat-paginator>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {OrdersComponent} from \"./orders.component\";\nimport {OrdersRoutingModule} from \"./orders-routing.module\";\nimport {FlexModule} from \"@angular/flex-layout\";\nimport {MatExpansionModule} from \"@angular/material/expansion\";\nimport {MatBadgeModule} from \"@angular/material/badge\";\nimport {MatProgressBarModule} from \"@angular/material/progress-bar\";\nimport {MatProgressSpinnerModule} from \"@angular/material/progress-spinner\";\nimport {MatCardModule} from \"@angular/material/card\";\nimport {MatButtonModule} from \"@angular/material/button\";\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {MatInputModule} from \"@angular/material/input\";\nimport {MatIconModule} from \"@angular/material/icon\";\nimport {MatSlideToggleModule} from \"@angular/material/slide-toggle\";\nimport {MatListModule} from \"@angular/material/list\";\nimport {MatTabsModule} from \"@angular/material/tabs\";\nimport {MatOptionModule} from \"@angular/material/core\";\nimport {MatSelectModule} from \"@angular/material/select\";\nimport {MatTableModule} from \"@angular/material/table\";\nimport {MatSortModule} from \"@angular/material/sort\";\nimport {AddressModule} from \"../share/address/address.module\";\nimport {ContactModule} from \"../share/contact/contact.module\";\nimport {MatPaginatorModule} from '@angular/material/paginator';\nimport {NgxMaskModule} from 'ngx-mask';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\nimport {NgxMatSelectSearchModule} from 'ngx-mat-select-search';\nimport {PriceModule} from '../../../pipes/price.module';\nimport {StatusUpdateComponent} from './status-update/status-update.component';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatMenuModule} from '@angular/material/menu';\n\n@NgModule({\n\tdeclarations: [\n\t\tOrdersComponent,\n\t\tStatusUpdateComponent\n\t],\n\timports: [\n\t\tCommonModule,\n\t\tOrdersRoutingModule,\n\t\tFlexModule,\n\t\tMatExpansionModule,\n\t\tMatBadgeModule,\n\t\tMatProgressBarModule,\n\t\tMatProgressSpinnerModule,\n\t\tMatCardModule,\n\t\tMatButtonModule,\n\t\tReactiveFormsModule,\n\t\tMatInputModule,\n\t\tMatIconModule,\n\t\tMatSlideToggleModule,\n\t\tMatListModule,\n\t\tMatTabsModule,\n\t\tMatOptionModule,\n\t\tMatSelectModule,\n\t\tMatTableModule,\n\t\tMatSortModule,\n\t\tAddressModule,\n\t\tContactModule,\n\t\tMatPaginatorModule,\n\t\tNgxMaskModule,\n\t\tMatTooltipModule,\n\t\tMatAutocompleteModule,\n\t\tNgxMatSelectSearchModule,\n\t\tPriceModule,\n\t\tFormsModule,\n\t\tMatDialogModule,\n\t\tMatMenuModule,\n\t]\n})\nexport class OrdersModule { }\n","import { Component, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n@Component({\n\tselector: 'app-status-update',\n\ttemplateUrl: './status-update.component.html',\n\tstyleUrls: ['./status-update.component.scss'],\n\t\n})\nexport class StatusUpdateComponent {\n\tpublic trackingCode: string;\n\n\tconstructor(\n\t\tprivate dialogRef: MatDialogRef<StatusUpdateComponent>,\n\t\t@Inject(MAT_DIALOG_DATA) public data: any\n\t) { }\n\n\tpublic confirm() {\n\t\tthis.dialogRef.close({\n\t\t\tupdate: true,\n\t\t\ttrackingCode: this.trackingCode\n\t\t});\n\t}\n}\n","<div mat-dialog-title fxLayoutAlign=\"space-between center\">\n    <strong>Atualizar status para {{ data.status }}</strong>\n    <button mat-icon-button mat-dialog-close>\n        <i class=\"mdi mdi-close\"></i>\n    </button>\n</div>\n<mat-dialog-content fxLayout=\"column\">\n    <div>Deseja mesmo atualizar para o status de {{ data.status }}</div>\n    <mat-form-field *ngIf=\"data.status == 'sent'\">\n        <mat-label>Código de rastreio</mat-label>\n        <input matInput [(ngModel)]=\"trackingCode\">\n    </mat-form-field>\n</mat-dialog-content>\n<mat-dialog-actions fxLayoutAlign=\"end center\" class=\"margin-top\">\n    <button mat-stroked-button color=\"primary\" mat-dialog-close>Cancelar</button>\n    <button mat-raised-button color=\"primary\" (click)=\"confirm()\">Atualizar Status</button>\n</mat-dialog-actions>\n","import { Injectable } from '@angular/core';\nimport {HttpClient, HttpParams} from '@angular/common/http';\nimport {Observable} from \"rxjs\";\nimport {environment} from \"../../../../environments/environment\";\nimport {IOrder, IPaymentStatus} from '../../../interfaces/IOrder';\nimport {IResponse, IResponseData} from '../../../interfaces/IResponse';\nimport {IProduct} from '../../../interfaces/IProduct';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrderService {\n    constructor(private httpClient: HttpClient) { }\n\n    public getAll(page?: number): Observable<IResponseData<IProduct>> {\n        let httpParams = new HttpParams();\n        if (page) {\n            httpParams = httpParams.append('page', page.toString());\n        }\n        return this.httpClient.get<IResponseData<IProduct>>(environment.baseAuthUrl + '/orders/get-all', {\n            params: httpParams\n        });\n    }\n\n    public show(id: number): Observable<IOrder> {\n        let params = new HttpParams();\n        params = params.append('id', id.toString());\n        return this.httpClient.get<IOrder>(environment.baseSiteUrl + '/orders/show/', {\n            params\n        });\n    }\n\n    public delete(id: number): Observable<IResponse<IProduct>> {\n        return this.httpClient.delete<IResponse<IProduct>>(environment.baseAuthUrl + '/orders/delete/' + id, {});\n    }\n\n\tpublic dataprovider() {\n        return this.httpClient.get<IDataprovider>(environment.baseAuthUrl + '/orders/dataprovider');\n\t}\n\n    public changeStatus(id, status: string, trackingCode?: string) {\n        return this.httpClient.put<IResponse<IProduct>>(environment.baseAuthUrl + '/orders/status/', {\n            id,\n            status,\n            tracking_code: trackingCode\n        });\n    }\n}\n\ninterface IDataprovider {\n    payment_statuses: Array<IPaymentStatus>\n}\n\n"],"sourceRoot":"webpack:///"}